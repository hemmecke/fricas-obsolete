-- Test TexFormat output

)clear completely
--)read src/interp/msgdb.boot
--)compile src/algebra/tex.spad

-- COMPILATION COMPLETED --

E ==> Expression Integer
OF ==> OutputForm
R ==> Record(OUTPUTFORM:OF, SEXPRESSION: SExpression, TEXFORMAT:TexFormat)
e x ==> (print(([x::OF, outputTran(x::OF)$Lisp, x::OF::TexFormat]$R)::OF);x)
)set output tex on

a: OF := "a"::Symbol::OF
aa: OF := "aa"::Symbol::OF
b: OF := "b"::Symbol::OF
bb: OF := "bb"::Symbol::OF

e message("Hello World!")$OF
e message("")$OF
e message("%")$OF
e message("\")$OF
e message("_"")$OF
e message("__")$OF
e message("%pi")$OF
e message(" %pi")$OF
e message("%pi ")$OF

e outputForm("Hello World!")$OF
e outputForm("")$OF
e outputForm("%")$OF
e outputForm("\")$OF
e outputForm("_"")$OF
e outputForm("__")$OF
e outputForm("%pi")$OF
e outputForm(" %pi")$OF
e outputForm("%pi ")$OF
e outputForm("\")$OF
e outputForm("^")$OF
e outputForm("x^y")$OF
e outputForm("x~y")$OF

e outputForm("Hello World!"::Symbol)$OF
e outputForm(""::Symbol)$OF
e outputForm("%"::Symbol)$OF
e outputForm("\"::Symbol)$OF
e outputForm("_""::Symbol)$OF
e outputForm("__"::Symbol)$OF
e outputForm("%pi"::Symbol)$OF
e outputForm(" %pi"::Symbol)$OF
e outputForm("%pi "::Symbol)$OF
e outputForm("\"::Symbol)$OF
e outputForm("^"::Symbol)$OF
e outputForm("x^y"::Symbol)$OF
e outputForm("x~y"::Symbol)$OF

e %pi
e %i
e %e
e exp(%pi)
e %plusInfinity
e %minusInfinity

e Gamma(x)
e Gamma(x+1)*Gamma(x+2)
e Gamma(1/2)

e sin(2)
e sin(x)
e sin(1+x)
e tan((2*x+3)/(4*y-2))
e %pi^((2*x+3)/(4*y-2))

e quote a
e quote(a+b)
e quote(a/b)

e overbar(a+b*aa)
e overbar(a/(b+aa))

e box{123}$OF
e box((12+x)^(-u)/(y+z))

e [1, 2, 3, 5, 4]
e bracket(a^b/(b+a))$OF
e brace(a^b/(b+a))$OF
e paren(a^b/(b+a))$OF
e set [1, 2, 3, 5, 4]

e ((5 + sqrt 63 + sqrt 847)^(1/3))
e(root(5)$OF + root(a+b, a+2)$OF)

e(a..b)
e(a+b..aa/bb)
e(a+b..)

e continuedFraction(314159/100000)
e continuedFraction(14159/100000)
e continuedFraction(3, repeating [1], repeating [3, 6])

e(a rem b)
e((a+b) rem (aa*bb))
e((a+b) quo (aa*bb))
e((a+b) exquo (aa*bb))

e slash(a,b)$OF
e slash((3*z+2+z^2)/(1-y), log(x)+sin(x)+(y^2+x^3+x)^7)$OF

e sub(a, b)$OF
e sub(aa, bb)$OF
e sub(a+b, a+bb)$OF
e super(a, b)$OF
e super(aa, bb)$OF
e super(a+aa, b+bb)$OF

e binomial(a, b)
e binomial((a+b)^5, a*b)

e((a+b) <= a^b)

e differentiate(a, 1)
e differentiate(a, 4)
e differentiate(a+b, 4) -- parentheses?
e prime a
e prime(a+b)

e factorial n

eq_fn: (OF, OF) -> OF := =$OF
e eq_fn(a, b)

e((a or b)$OF)
e((aa or bb)$OF)
e((a and b)$OF)
e(((a+aa)$OF and (b^bb)$OF)$OF)
e(not(a)$OF)
e(not(eq_fn(aa,b+1))$OF)
e(((a and b)$OF or (aa and bb)$OF)$OF)
e(((a or b)$OF and (aa or bb)$OF)$OF)
e(a and b or aa and bb)
e(a or b and not aa or bb)

e assign(a, b+bb^a)
e rarrow(a, b)
e rarrow(a+b, aa^bb)

e(a+b)
e(a+b+aa+bb)

e prefix("f"::OF, [aa, bb, 4::OF])
e prefix("f"::OF, empty()$List(OF))
e infix("f"::Symbol::OF, a, b)
e infix("+"::Symbol::OF, a, b)
e infix("^"::Symbol::OF, a, b)
e infix("^"::Symbol::OF, a+b, aa+bb)
e infix("f"::Symbol::OF, empty()$List(OF))
e infix("f"::Symbol::OF, [a,b, 7::OF, bb, aa])

e tensor(a,b)

e ((x+y)^2)
e ((a+b)^2)
e integrate(x^x, x)
e integral(x^x, x)
e multiset [x rem 5 for x in primes(2, 1000)]
e multiset [x::OF rem 5 for x in primes(2, 100)]

e integral(x^x, x)
e integral(x^x, x=u..v)
e integral(sin x, x=u..v)
e integral(sin x, x)
e sum(x^x, x)
e sum(x^x, x=u..v)
e product(x^x, x)
e product(x^x, x=u..v)
e product(x^x, x=1..u/v)
e(product(x^x, x=1..u/v)^(r+s))

e supersub(aa+bb,[a])
e supersub(a,[a,b,1,2,3,4])
e supersub(a,[a,b,1,2+b,3+a*b,4,5])

e(formatExpression$TexFormat)
e eq_fn

e matrix [ [x^i + y^j for i in 1..3] for j in 1..5]
e matrix [ [x^i + y^j for i in 1..10] for j in 1..10]

e pile [a, b, aa+a, bb]
e vconcat [a, b, aa+a, bb]

e series(sin(x+1), x = 1)
e series(1/log(y), y = 1)

e (t: UTS(FLOAT, 'z, 0) := exp(z))
)clear properties t

y := operator 'y
e D(y(x, z), [x, x, z, x])
e D(y x, x, 2)

F := operator 'F
x := operator 'x
y := operator 'y
t := F(x z, y z, z^2) + x y(z+1)
e D(t, z)
e [1, 2]

)clear properties F x y t

e presub(F::OF, 2::OF)
e presub(F, 2)$OF
e scripts(F::OF, [2::OF, empty()$OF, empty()$OF, 1::OF])
e scripts(F, [2, empty(), empty(), 1])$OF
e scripts(F, [2])$OF
e scripts(F, [2,4])$OF
e scripts(F, [2,4,7])$OF
e scripts(F, [2,4,7,11])$OF

e [chebyshevT(i, z) for i in 0..7]
e [n for n in 1..30]
e factor (4*x^3+2*y^2+1)*(12*x^5-x^3*y+12)*(x+1)*(y^2+3)*(x^2-1)
e factor((y^4-1)*(x^4-1)*(z^4-1)*(u^4-1))

e matrix [[1,2,1],[2,1,-2],[1,-2,4]]
e eigenvalues matrix [[1,2,1],[2,1,-2],[1,-2,4]]
e solve(x^3  = 8,x)
e radicalSolve(x^3  = 8,x)
e(radicalSolve(1/c^3 + 1/c^2 + 1/c = 0, c)@List(Equation(E)))

e rule x == y

e 1234567890123456789012345678901234567890123456789012345678901234567890
e 123456.7890123456789012345678901234567890123456789012345678901234567890
e roman 1234
e decimal(1/352)
e partialFraction(1,factorial(10))
e padicFraction partialFraction(1,factorial(10))
e bits(32,true)
e([28, 32005.12]$Record(age: Integer, salary: Float))
e exp exp x
e D(exp exp x, x)
e integrate(log(1 + sqrt(u*x + v)) / x,x)

x := operator 'x
y := operator 'y
eq1 := D(x(t), t) = 1 + x(t)^2
eq2 := D(y(t), t) = x(t) * y(t)
e seriesSolve([eq2, eq1], [x, y], t = 0, [y(0) = 1, x(0) = 0])
)clear properties x y eq1 eq2


-- The following actually comes out as \SYMBOL{Integer}.
e Integer
-- The following actually comes out as \STRING{Polynomial(Integer)}.
e Polynomial Integer
-- The following actually comes out as \STRING{Fraction(Polynomial(Integer))}.
e Fraction Polynomial Integer
-- The following actually comes out as \STRING{SquareMatrix(3,Integer)}.
e SquareMatrix(3, Integer)

S1 ==> SquareMatrix(2,Polynomial Complex Fraction Integer)
S2 ==> SquareMatrix(2,Polynomial Fraction Complex Integer)
S3 ==> SquareMatrix(2,Fraction Polynomial Complex Integer)
S4 ==> Polynomial SquareMatrix(2,Fraction Complex Integer)
e(s1: S1 := matrix [[x-3/4*%i,z*y^2+1/2],[3/7*%i*y^4 - x,12-%i*9/5]])
e(s1::S2)
e(s1::S3)
e(s1::S4)

e [[i/j for i in j+1..] for j in 1..]

mersenne i == 2^i - 1
mersenne

e(x +-> if x < 0 then -x else x)
e((x,y) +-> abs1(x) > abs1(y))
e((i,j) +-> if even?(i+j) then 1 else -1)
e((x: INT,y: INT): FRAC INT +-> (x + 2*y)/(y - 1))

e rule integral((?y + exp x)/x,x) == integral(y/x,x) + Ei x

e dark blue()

e Aleph 1
e sin cos tan x
e script(Mammoth, [[i,j],[k,l],[0,1],[2],[u,v,w]])

e (a + (-b))
e (a * (-b))
e (a ^ (-b))

e [1, 2, 3, 5, 4]
setHandler!(-1, "AGGLST", naryNoParen ",")
e [1, 2, 3, 5, 4]

addx x == ((y: Integer): Integer +-> x + y)
e addx 10

e subscript(v, [1,n,t])
e superscript(v, [1,n,t])
e argscript(v, [1,n,t])

e subscript(v, [1,n,t])^3
e superscript(v, [1,n,t])^4
e argscript(v, [1,n,t])^5

e (x^(y^2))
e (x^y * x^y) -- (x^y)^2

e(sin x + 3*cos(x)^2)
e(sin x + 3*cos(x^2))
