%-------------------------- postscript draw commands --------------------------%
%!IBM Personal Pageprinter (4216) Adapter Program V1.0
%%DocumentFonts: Times-Roman
%%Creator: Axiom
%%CreationDate: today
%%Pages: 1
%%processing (hard) limit: 250 pts or 500 values for the operand stack.
%%EndComments
 
%------------------------------- prologue -------------------------------%
%-------------------------- support procedures --------------------------%
 
%--------- first create user dictionary with 100 entries max ------------%
%	   (number can be changed to accomodate definitions)		 %
 
100	dict	begin		%% using 100 entries in top level dictionary
 
/FontHeight	12 def
 
/inch
	{	72 mul }
	def
 
% yVal and hVal are necessary because the Xwindow display origin
% is at the upper left corner, while the postscript display
% origin is at the lower left hand corner.
 
/yVal		%% get Y value -- make upper left corner origin
	{	maxY sub abs }	%% maxY is viewWindow height
	def
 
/hVal		%% get H value -- used for displaying title text
	{	maxH sub abs }	%% maxH is viewWindow height+titleWindow height
	def
 
% loads in the font
 
/loadFont
	{	/Times-Roman findfont FontHeight scalefont setfont }
	def
 
% draws a rectangle with input operand:
%		height
%		width
% notice that this function does not "draw" or ink the rectangle.
/drawRect
	{	1 index 1 add 0 rlineto		%% draw first side
		0 exch 1 add neg rlineto	%% draw second side
		1 add neg 0 rlineto		%% draw third side
		closepath }			%% draw fourth side
	def
 
% create a rectangle with input operand in the view window:
%		y
%		x
%		height
%		width
% notice that this function does not "draw" or ink the rectangle.
/rectangle
	{	yVal moveto			%% set currentpoint for line
		drawRect }			%% draws the rectangle
	def
 
% These are global variables that every draw procedure uses
% THe operand should be as follows:
%		viewWindow width
%		viewWindow height
%		title height
/setDim
	{	/maxX exch def			%% width of display
		/maxY exch def			%% height of display
		/titleH exch def		%% height of title
		/maxH maxY titleH add def	%% height of display + title
	} def
 
%-------------------------- major procedures --------------------------%
 
/title		%% draws a rectangle around the title of picture
	{	gsave
		newpath
		moveto				%% lower left of title
		titleH 1 add 0 exch rlineto	%% draw first side
		1 add 0 rlineto			%% draw second side
		1 add neg 0 exch rlineto
		begin installGC stroke end	%% draw third side
		grestore }
	def
 
/drawFrame	%% draw display frame
	{	gsave
		newpath
		maxX maxY 0 0 rectangle
		begin installGC stroke end
		grestore }
	def
 
% updates the foreground color of existing graphics-context dictionary:
%		foreground color
%		dictionary name
/setForeground
	{	/FGcolor exch put }
	def
 
% updates the background color of existing graphics-context dictionary:
%		background color
%		dictionary name
/setBackground
	{	/BGcolor exch put }
	def
 
% updates the line width, line style, cap style, join style of
% existing graphics-context dictionary:
%		dictionary name
%		join style
%		cap style
%		line width
/setLineAttributes
	{	begin
		/JoinStyle exch def
		/CapStyle  exch def
		/LineWidth exch def
		end }
	def
 
% creates a graphics context dictionary with the following information:
%		/dictionary name
%		foreground color
%		background color
%		line width
%		cap style
%		join style
% this creates different graphical contexts for different drawing functions.
/makeDict
	{	5 dict 2 copy def begin pop %% with dict name on top of stack
		/FGcolor   exch def	%% define drawing attributes
		/BGcolor   exch def	%% not heavily used
		/LineWidth exch def
		/CapStyle  exch def
		/JoinStyle exch def
		end }
	def
 
% makes the current dictionary attributes effective
% this function takes the values in the current dictionary to set the context
% these are the values currently being used: foreground, cap, join, and width
/installGC
	{
		FGcolor currentgray ne
		{FGcolor setgray} if		%% foreground color
		CapStyle currentlinecap ne
		{CapStyle setlinecap} if	%% cap style
		JoinStyle currentlinejoin ne
		{JoinStyle setlinejoin} if	%% join style
		LineWidth currentlinewidth ne
		{LineWidth setlinewidth} if }	%% line width
	def
 
% operand stack configuration in order to use psDrawLine:
%		psDrawLine
%		y0
%		x0
%		y1
%		x1
%		graphics-context dictionary
% this draws a line from (x0, y0) to (x1, y1).
 
/psDrawLine
	{	gsave
		newpath
		yVal moveto
		yVal lineto
		begin installGC stroke end
		grestore }
	def
 
% operand stack configuration in order to use psDrawIStr:
%		psDrawIStr
%		window type: title or window
%		string
%		y
%		x
%		graphics-context dictionary
% it draws a text string in foreground color on top of bounding box of
% string, which is in background color.
 
/psDrawIStr
	{	gsave
		newpath					%% for rectangle
		loadFont
 
		/window exch def			%% get window type
 
		%% draw bounding box with background color
		/str exch def				%% get text string
		str stringwidth pop 1 sub		%% width
		FontHeight 1 sub			%% height
		currentfont begin			%% get font height
			FontBBox
		end
		/ypos exch def pop			%% define ypos
		neg ypos add /offset exch def pop
		/offset ypos offset div FontHeight mul def %% define offset
		/h exch def /w exch def			%% define h
		/y0 exch def				%% define y0
		/x0 exch def				%% define x0
		w h x0 y0 offset sub
		window (title) eq
		{hVal moveto drawRect}			%% draws in title window
		{rectangle} ifelse			%% draws in view window
		begin
		BGcolor setgray fill	%% set background box color
 
		x0 y0
		window (title) eq 
		{hVal}					%% print title text
		{yVal} ifelse				%% print window text
		moveto str 
		FGcolor setgray show			%% set text color
		end
		grestore }
	def
 
% operand stack configuration in order to use psFillArc:
%		psFillArc
%		y center of rectangle
%		x center of rectangle
%		angle2
%		angle1
%		width
%		height
%		y
%		x
%		graphics-context dictionary
% this draws and fills an arc whose origin is at x, y, and whose width
% and height specifies the rectangle which encases the arc.
% Origin is at upper left corner of rectangle.
% This function uses "scale" to make cricles and ellipses.
/psFillArc
	{	gsave
		newpath
		yVal moveto
		/sfactor 4 index 4 index div def
		1 sfactor scale
		6 5 roll			%%	 x on top of stack
		3 index 2 div add		%% define x origin
		6 5 roll			%%	 y on top of stack
		6 5 roll			%%	 h on top of stack
		2 div add yVal sfactor div	%% define y origin
		5 4 roll			%%	 w on top of stack
		2 div				%% define radius
		5 3 roll			%%	 a1 a2 now on top
		1 index add
		arcn				%% draw clockwise arc
		begin installGC fill end	%% fills with foreground color
		grestore }
	def
 
%-------------------------- script --------------------------%
 
1 inch 1 inch translate
 
   mark					%% mark bottom of our stack
 
	0	0	1
	1072693248	0	/globalGC1	makeDict
	0	0	1
	1072693248	0	/globalGC2	makeDict
	0	0	1
	1072693248	0	/trashGC	makeDict
	0	0	1
	1072693248	0	/globGC makeDict
	0	0	1
	1072693248	0	/anotherGC	makeDict
	0	0	1
	1072693248	0	/graphGC	makeDict
	0	0	1
	1072693248	0	/unitGC makeDict
	0	0	3
	1072693248	0	/frameDict	makeDict
 
    gsave	% save graphics state for clipping path
 
	24	233	256	setDim
	maxX maxY	0 0	rectangle	clip	% set clip path
 
	globalGC1	256	205	0	205	psDrawLine
	globalGC1	128	233	128	0	psDrawLine
	unitGC	128	207	128	203	psDrawLine
	unitGC	116	220	(0.00)	(window)	psDrawIStr
	unitGC	198	207	198	203	psDrawLine
	unitGC	186	220	(1.60)	(window)	psDrawIStr
	unitGC	56	207	56	203	psDrawLine
	unitGC	41	220	(-1.60) (window)	psDrawIStr
	unitGC	130	169	126	169	psDrawLine
	unitGC	92	174	(0.80)	(window)	psDrawIStr
	unitGC	130	133	126	133	psDrawLine
	unitGC	92	138	(1.60)	(window)	psDrawIStr
	unitGC	130	97	126	97	psDrawLine
	unitGC	92	102	(2.40)	(window)	psDrawIStr
	unitGC	130	61	126	61	psDrawLine
	unitGC	92	66	(3.20)	(window)	psDrawIStr
	unitGC	130	25	126	25	psDrawLine
	unitGC	92	30	(4.00)	(window)	psDrawIStr
	globalGC1	37 24	3 3	0 360	38 25	psFillArc
	globalGC1	38	25	38	25	psDrawLine
	globalGC1	37 24	3 3	0 360	38 25	psFillArc
	globalGC1	41	40	38	25	psDrawLine
	globalGC1	40 39	3 3	0 360	41 40	psFillArc
	globalGC1	45	54	41	40	psDrawLine
	globalGC1	44 53	3 3	0 360	45 54	psFillArc
	globalGC1	49	67	45	54	psDrawLine
	globalGC1	48 66	3 3	0 360	49 67	psFillArc
	globalGC1	53	80	49	67	psDrawLine
	globalGC1	52 79	3 3	0 360	53 80	psFillArc
	globalGC1	56	92	53	80	psDrawLine
	globalGC1	55 91	3 3	0 360	56 92	psFillArc
	globalGC1	60	104	56	92	psDrawLine
	globalGC1	59 103	3 3	0 360	60 104	psFillArc
	globalGC1	64	115	60	104	psDrawLine
	globalGC1	63 114	3 3	0 360	64 115	psFillArc
	globalGC1	68	125	64	115	psDrawLine
	globalGC1	67 124	3 3	0 360	68 125	psFillArc
	globalGC1	71	135	68	125	psDrawLine
	globalGC1	70 134	3 3	0 360	71 135	psFillArc
	globalGC1	75	144	71	135	psDrawLine
	globalGC1	74 143	3 3	0 360	75 144	psFillArc
	globalGC1	79	152	75	144	psDrawLine
	globalGC1	78 151	3 3	0 360	79 152	psFillArc
	globalGC1	83	160	79	152	psDrawLine
	globalGC1	82 159	3 3	0 360	83 160	psFillArc
	globalGC1	86	167	83	160	psDrawLine
	globalGC1	85 166	3 3	0 360	86 167	psFillArc
	globalGC1	90	174	86	167	psDrawLine
	globalGC1	89 173	3 3	0 360	90 174	psFillArc
	globalGC1	94	179	90	174	psDrawLine
	globalGC1	93 178	3 3	0 360	94 179	psFillArc
	globalGC1	98	185	94	179	psDrawLine
	globalGC1	97 184	3 3	0 360	98 185	psFillArc
	globalGC1	101	189	98	185	psDrawLine
	globalGC1	100 188 3 3	0 360	101 189 psFillArc
	globalGC1	105	193	101	189	psDrawLine
	globalGC1	104 192 3 3	0 360	105 193 psFillArc
	globalGC1	109	197	105	193	psDrawLine
	globalGC1	108 196 3 3	0 360	109 197 psFillArc
	globalGC1	113	200	109	197	psDrawLine
	globalGC1	112 199 3 3	0 360	113 200 psFillArc
	globalGC1	116	202	113	200	psDrawLine
	globalGC1	115 201 3 3	0 360	116 202 psFillArc
	globalGC1	120	203	116	202	psDrawLine
	globalGC1	119 202 3 3	0 360	120 203 psFillArc
	globalGC1	124	204	120	203	psDrawLine
	globalGC1	123 203 3 3	0 360	124 204 psFillArc
	globalGC1	127	205	124	204	psDrawLine
	globalGC1	126 204 3 3	0 360	127 205 psFillArc
	globalGC1	131	204	127	205	psDrawLine
	globalGC1	130 203 3 3	0 360	131 204 psFillArc
	globalGC1	135	203	131	204	psDrawLine
	globalGC1	134 202 3 3	0 360	135 203 psFillArc
	globalGC1	139	202	135	203	psDrawLine
	globalGC1	138 201 3 3	0 360	139 202 psFillArc
	globalGC1	142	200	139	202	psDrawLine
	globalGC1	141 199 3 3	0 360	142 200 psFillArc
	globalGC1	146	197	142	200	psDrawLine
	globalGC1	145 196 3 3	0 360	146 197 psFillArc
	globalGC1	150	193	146	197	psDrawLine
	globalGC1	149 192 3 3	0 360	150 193 psFillArc
	globalGC1	154	189	150	193	psDrawLine
	globalGC1	153 188 3 3	0 360	154 189 psFillArc
	globalGC1	157	185	154	189	psDrawLine
	globalGC1	156 184 3 3	0 360	157 185 psFillArc
	globalGC1	161	179	157	185	psDrawLine
	globalGC1	160 178 3 3	0 360	161 179 psFillArc
	globalGC1	165	174	161	179	psDrawLine
	globalGC1	164 173 3 3	0 360	165 174 psFillArc
	globalGC1	169	167	165	174	psDrawLine
	globalGC1	168 166 3 3	0 360	169 167 psFillArc
	globalGC1	172	160	169	167	psDrawLine
	globalGC1	171 159 3 3	0 360	172 160 psFillArc
	globalGC1	176	152	172	160	psDrawLine
	globalGC1	175 151 3 3	0 360	176 152 psFillArc
	globalGC1	180	144	176	152	psDrawLine
	globalGC1	179 143 3 3	0 360	180 144 psFillArc
	globalGC1	184	135	180	144	psDrawLine
	globalGC1	183 134 3 3	0 360	184 135 psFillArc
	globalGC1	187	125	184	135	psDrawLine
	globalGC1	186 124 3 3	0 360	187 125 psFillArc
	globalGC1	191	115	187	125	psDrawLine
	globalGC1	190 114 3 3	0 360	191 115 psFillArc
	globalGC1	195	104	191	115	psDrawLine
	globalGC1	194 103 3 3	0 360	195 104 psFillArc
	globalGC1	199	92	195	104	psDrawLine
	globalGC1	198 91	3 3	0 360	199 92	psFillArc
	globalGC1	202	80	199	92	psDrawLine
	globalGC1	201 79	3 3	0 360	202 80	psFillArc
	globalGC1	206	67	202	80	psDrawLine
	globalGC1	205 66	3 3	0 360	206 67	psFillArc
	globalGC1	210	54	206	67	psDrawLine
	globalGC1	209 53	3 3	0 360	210 54	psFillArc
	globalGC1	214	40	210	54	psDrawLine
	globalGC1	213 39	3 3	0 360	214 40	psFillArc
	globalGC1	217	25	214	40	psDrawLine
	globalGC1	216 24	3 3	0 360	217 25	psFillArc
 
    grestore	% restore graphics state
 
%	frameDict	24	256	0	233	title
%	frameDict	drawFrame
%	frameDict	loadFont
%	256	(x*x) stringwidth pop sub 2 div
%	15	(x*x)	(title) psDrawIStr
 
   cleartomark					%% clearing operand stack
 
end		%% pops mainDict from dictionary stack
 
showpage
 
%-------------------------- end --------------------------%
